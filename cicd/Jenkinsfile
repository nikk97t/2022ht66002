def version = ""
pipeline {
  agent {
    label "slave-1"
  }
  parameters {
    string(name: 'versionprefix', defaultValue: '1.0.', description: 'Mention version prefix. This will be appended with build number')
  }
  stages {
    stage("Init") {
      steps {
        script {
          version = "${params.versionprefix}${currentBuild.number}"
          currentBuild.displayName = version

          git branch: '$BRANCH_NAME',
              credentialsId: '14642e87-7795-479b-89b7-4203e3dbf83a',
              url: 'https://github.com/nikk97t/2022ht66002.git'
        }
      }
    }
    stage("Build") {
      steps {
        script {
          sh """
            mkdir ${version} &&
            cp -r -f ./data ./${version}/ &&
            cp -r -f ./ui ./${version}/ &&
            cp -r -f ./Utils ./${version}/ &&
            cp -r -f ./config.json ./${version}/ &&
            cp -r -f ./server.py ./${version}/ &&
            cp -r -f ./cicd/install.py ./${version}/ &&
            cp -r -f ./cicd/server.sh ./${version}/ &&
            cp -r -f ./cicd/tnik.service ./${version}/ &&
            zip -r package.zip ./${version}
          """
        }
      }
    }
    stage("Package") {
      steps {
        script {
          sh """
            sudo zip -r package.zip ./${version}
          """
        }
      }
    }
    stage("Test") {
      steps {
        script {
          sh """
            . /jenkins/workspace/venv/bin/activate
            coverage run -m pytest
            coverage html
          """
        }
      }
    }
    stage("Deploy") {
      steps {
        script {
          sh """
            sudo rm -rf /opt/tnik
            sudo mv ./${version} /opt/tnik
            sudo rm -rf /etc/systemd/system/tnik.service
            sudo cp ./tnik.service /etc/systemd/system/tnik.service
            sudo systemctl daemon-reload
            sudo systemctl restart tnik.service
            sudo systemctl status tnik.service
          """
        }
      }
    }
  }
  post {
    always {
      echo "========always========"
    }
    success {
      echo "========pipeline executed successfully ========"
      publishHTML (target : [allowMissing: false,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'htmlcov',
        reportFiles: 'index.html',
        reportName: 'Coverage-Test-Report',
        reportTitles: 'Coverage-Test-Report'])
    }
    failure {
      echo "========pipeline execution failed========"
    }
  }
}